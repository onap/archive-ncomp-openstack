
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.ncomp.servers.openstack.loc;





import java.io.InputStream;

import org.openecomp.ncomp.sirius.manager.IRequestHandler;
import org.openecomp.ncomp.sirius.manager.ISwaggerHandler;
import org.openecomp.ncomp.sirius.manager.ISiriusPlugin;
import org.openecomp.ncomp.sirius.manager.ISiriusServer;
import org.openecomp.ncomp.sirius.manager.ISiriusProvider;
import org.openecomp.ncomp.sirius.manager.ManagementServer;
import org.openecomp.ncomp.sirius.manager.SwaggerUtils;
import org.openecomp.ncomp.sirius.function.FunctionUtils;
import org.openecomp.ncomp.component.ApiRequestStatus;

import org.apache.log4j.Logger;

import org.openecomp.ncomp.sirius.manager.logging.NcompLogger;
import org.openecomp.logger.StatusCodeEnum;
import org.openecomp.logger.EcompException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.json.JSONObject;

import java.util.Date;

import org.openecomp.ncomp.servers.openstack.loc.logging.OpenStackLocationOperationEnum;
import org.openecomp.ncomp.servers.openstack.loc.logging.OpenStackLocationMessageEnum;




import org.openecomp.ncomp.openstack.location.impl.OpenStackLocationImpl;



public class OsOpenStackLocation extends OpenStackLocationImpl implements ISiriusProvider {
	public static final Logger logger = Logger.getLogger(OsOpenStackLocation.class);
	static final NcompLogger ecomplogger = NcompLogger.getNcompLogger();
	public OsOpenStackLocationProvider controller;
	ISiriusServer server;

	public OsOpenStackLocation(ISiriusServer server) {
		this.server = server;
		this.controller = new OsOpenStackLocationProvider(server,this);
	}

	public void poll() {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "poll", ApiRequestStatus.START, duration_);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_poll,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_poll,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.poll();
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "poll", ApiRequestStatus.ERROR, duration_);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_poll, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_poll,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_poll, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "poll", ApiRequestStatus.OKAY, duration_);
		
	}

	public void mergeLocation(org.openecomp.ncomp.openstack.location.OpenStackLocation loc) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "mergeLocation", ApiRequestStatus.START, duration_,loc);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_mergeLocation,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_mergeLocation,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.mergeLocation(loc);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "mergeLocation", ApiRequestStatus.ERROR, duration_,loc);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_mergeLocation, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_mergeLocation,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_mergeLocation, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "mergeLocation", ApiRequestStatus.OKAY, duration_,loc);
		
	}

	public org.openecomp.ncomp.openstack.neutron.Network createNetwork(org.openecomp.ncomp.openstack.neutron.CreateNetworkRequest request) {
		org.openecomp.ncomp.openstack.neutron.Network res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createNetwork", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_createNetwork,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createNetwork,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.createNetwork(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createNetwork", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_createNetwork, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_createNetwork,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_createNetwork, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createNetwork", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}

	public org.openecomp.ncomp.openstack.neutron.Subnet createSubnet(org.openecomp.ncomp.openstack.neutron.CreateSubnetRequest request) {
		org.openecomp.ncomp.openstack.neutron.Subnet res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createSubnet", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_createSubnet,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createSubnet,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.createSubnet(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createSubnet", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_createSubnet, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_createSubnet,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_createSubnet, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createSubnet", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}

	public org.openecomp.ncomp.openstack.neutron.Port createPort(org.openecomp.ncomp.openstack.neutron.CreatePortRequest request) {
		org.openecomp.ncomp.openstack.neutron.Port res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createPort", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_createPort,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createPort,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.createPort(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createPort", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_createPort, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_createPort,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_createPort, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createPort", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}

	public org.openecomp.ncomp.openstack.neutron.Router createRouter(org.openecomp.ncomp.openstack.neutron.CreateRouterRequest request) {
		org.openecomp.ncomp.openstack.neutron.Router res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createRouter", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_createRouter,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createRouter,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.createRouter(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createRouter", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_createRouter, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_createRouter,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_createRouter, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createRouter", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}

	public void deleteNetwork(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteNetwork", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_deleteNetwork,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deleteNetwork,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.deleteNetwork(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteNetwork", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_deleteNetwork, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_deleteNetwork,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_deleteNetwork, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteNetwork", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public void deleteSubnet(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteSubnet", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_deleteSubnet,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deleteSubnet,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.deleteSubnet(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteSubnet", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_deleteSubnet, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_deleteSubnet,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_deleteSubnet, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteSubnet", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public void deletePort(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deletePort", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_deletePort,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deletePort,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.deletePort(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deletePort", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_deletePort, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_deletePort,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_deletePort, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deletePort", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public void deleteRouter(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteRouter", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_deleteRouter,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deleteRouter,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.deleteRouter(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteRouter", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_deleteRouter, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_deleteRouter,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_deleteRouter, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteRouter", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public void associateFloatingIp(java.lang.String projectName, java.lang.String ipId, java.lang.String portId) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "associateFloatingIp", ApiRequestStatus.START, duration_,projectName,ipId,portId);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_associateFloatingIp,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_associateFloatingIp,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.associateFloatingIp(projectName,ipId,portId);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "associateFloatingIp", ApiRequestStatus.ERROR, duration_,projectName,ipId,portId);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_associateFloatingIp, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_associateFloatingIp,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_associateFloatingIp, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "associateFloatingIp", ApiRequestStatus.OKAY, duration_,projectName,ipId,portId);
		
	}

	public void createServer(org.openecomp.ncomp.openstack.compute.OpenstackRequestNewServer request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createServer", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_createServer,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createServer,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.createServer(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createServer", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_createServer, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_createServer,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_createServer, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createServer", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void deleteServer(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteServer", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_deleteServer,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deleteServer,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.deleteServer(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteServer", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_deleteServer, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_deleteServer,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_deleteServer, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteServer", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public void createKeyPair(org.openecomp.ncomp.openstack.compute.OpenstackRequestKeyPair request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createKeyPair", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_createKeyPair,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createKeyPair,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.createKeyPair(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createKeyPair", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_createKeyPair, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_createKeyPair,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_createKeyPair, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createKeyPair", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void delete(org.openecomp.ncomp.openstack.core.OpenstackRequestDelete request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "delete", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_delete,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_delete,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.delete(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "delete", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_delete, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_delete,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_delete, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "delete", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void createFlavor(org.openecomp.ncomp.openstack.compute.OpenstackRequestFlavor request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createFlavor", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_createFlavor,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createFlavor,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.createFlavor(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createFlavor", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_createFlavor, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_createFlavor,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_createFlavor, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createFlavor", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void createSecurityGroup(org.openecomp.ncomp.openstack.compute.OpenstackRequestSecurityGroup request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createSecurityGroup", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_createSecurityGroup,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createSecurityGroup,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.createSecurityGroup(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createSecurityGroup", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_createSecurityGroup, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_createSecurityGroup,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_createSecurityGroup, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createSecurityGroup", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void serverAction(org.openecomp.ncomp.openstack.compute.OpenstackRequestServerAction request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "serverAction", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_serverAction,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_serverAction,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.serverAction(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "serverAction", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_serverAction, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_serverAction,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_serverAction, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "serverAction", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void deployVmType(java.lang.String vmTypeName, java.lang.String projectName) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deployVmType", ApiRequestStatus.START, duration_,vmTypeName,projectName);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_deployVmType,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deployVmType,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.deployVmType(vmTypeName,projectName);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deployVmType", ApiRequestStatus.ERROR, duration_,vmTypeName,projectName);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_deployVmType, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_deployVmType,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_deployVmType, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deployVmType", ApiRequestStatus.OKAY, duration_,vmTypeName,projectName);
		
	}

	public void undeployVmType(java.lang.String vmTypeName, java.lang.String projectName) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "undeployVmType", ApiRequestStatus.START, duration_,vmTypeName,projectName);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_undeployVmType,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_undeployVmType,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.undeployVmType(vmTypeName,projectName);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "undeployVmType", ApiRequestStatus.ERROR, duration_,vmTypeName,projectName);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_undeployVmType, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_undeployVmType,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_undeployVmType, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "undeployVmType", ApiRequestStatus.OKAY, duration_,vmTypeName,projectName);
		
	}

	public void deployUser(org.openecomp.ncomp.core.User user, java.lang.String projectName) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deployUser", ApiRequestStatus.START, duration_,user,projectName);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_deployUser,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deployUser,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.deployUser(user,projectName);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deployUser", ApiRequestStatus.ERROR, duration_,user,projectName);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_deployUser, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_deployUser,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_deployUser, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deployUser", ApiRequestStatus.OKAY, duration_,user,projectName);
		
	}

	public void undeployUser(org.openecomp.ncomp.core.User user, java.lang.String projectName) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "undeployUser", ApiRequestStatus.START, duration_,user,projectName);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_undeployUser,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_undeployUser,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.undeployUser(user,projectName);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "undeployUser", ApiRequestStatus.ERROR, duration_,user,projectName);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_undeployUser, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_undeployUser,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_undeployUser, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "undeployUser", ApiRequestStatus.OKAY, duration_,user,projectName);
		
	}

	public org.openecomp.ncomp.openstack.ceilometer.CeilometerAlarm createAlarm(org.openecomp.ncomp.openstack.ceilometer.CreateAlarmRequest request) {
		org.openecomp.ncomp.openstack.ceilometer.CeilometerAlarm res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_createAlarm,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createAlarm,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.createAlarm(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_createAlarm, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_createAlarm,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_createAlarm, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}

	public void deleteAlarm(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteAlarm", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_deleteAlarm,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deleteAlarm,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.deleteAlarm(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteAlarm", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_deleteAlarm, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_deleteAlarm,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_deleteAlarm, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteAlarm", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public EList<org.openecomp.ncomp.openstack.ceilometer.CeilometerSample> createAlarm(org.openecomp.ncomp.openstack.ceilometer.SampleRequest request) {
		EList<org.openecomp.ncomp.openstack.ceilometer.CeilometerSample> res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(OpenStackLocationOperationEnum.OpenStackLocation_createAlarm,server,this);
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createAlarm,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.createAlarm(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.REQUEST_FAILED_createAlarm, e.toString());
			EcompException e1 =  EcompException.create(OpenStackLocationMessageEnum.REQUEST_FAILED_createAlarm,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, OpenStackLocationMessageEnum.REQUEST_FAILED_createAlarm, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}








	public static void ecoreSetup() {
		OsOpenStackLocationProvider.ecoreSetup();
	}
	public OsOpenStackLocationProvider getSiriusProvider() {
		return controller;
	}
}
