
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.ncomp.servers.openstack.loc;




import java.io.InputStream;

import org.openecomp.ncomp.sirius.manager.IRequestHandler;
import org.openecomp.ncomp.sirius.manager.ISiriusPlugin;
import org.openecomp.ncomp.sirius.manager.ISiriusServer;
import org.openecomp.ncomp.sirius.manager.ManagementServer;
import org.openecomp.ncomp.sirius.function.FunctionUtils;
import org.openecomp.ncomp.component.ApiRequestStatus;

import org.apache.log4j.Logger;

import org.openecomp.logger.EcompLogger;

import org.eclipse.emf.common.util.EList;
import org.json.JSONObject;

import java.util.Date;

import org.openecomp.ncomp.servers.openstack.loc.logging.OpenStackLocationOperationEnum;
import org.openecomp.ncomp.servers.openstack.loc.logging.OpenStackLocationMessageEnum;




import org.openecomp.ncomp.openstack.location.impl.OpenStackLocationImpl;



public class OsOpenStackLocation extends OpenStackLocationImpl {
	public static final Logger logger = Logger.getLogger(OsOpenStackLocation.class);
	static final EcompLogger ecomplogger = EcompLogger.getEcompLogger();
	public OsOpenStackLocationProvider controller;
	ISiriusServer server;

	public OsOpenStackLocation(ISiriusServer server) {
		this.server = server;
		this.controller = new OsOpenStackLocationProvider(server,this);
	}

	public void poll() {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "poll", ApiRequestStatus.START, duration_);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.poll);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.poll();
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "poll", ApiRequestStatus.ERROR, duration_);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.poll, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "poll", ApiRequestStatus.OKAY, duration_);
		
	}

	public void mergeLocation(org.openecomp.ncomp.openstack.location.OpenStackLocation loc) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "mergeLocation", ApiRequestStatus.START, duration_,loc);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.mergeLocation);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.mergeLocation(loc);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "mergeLocation", ApiRequestStatus.ERROR, duration_,loc);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.mergeLocation, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "mergeLocation", ApiRequestStatus.OKAY, duration_,loc);
		
	}

	public org.openecomp.ncomp.openstack.neutron.Network createNetwork(org.openecomp.ncomp.openstack.neutron.CreateNetworkRequest request) {
		org.openecomp.ncomp.openstack.neutron.Network res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createNetwork", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.createNetwork);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.createNetwork(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createNetwork", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.createNetwork, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createNetwork", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}

	public org.openecomp.ncomp.openstack.neutron.Subnet createSubnet(org.openecomp.ncomp.openstack.neutron.CreateSubnetRequest request) {
		org.openecomp.ncomp.openstack.neutron.Subnet res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createSubnet", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.createSubnet);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.createSubnet(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createSubnet", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.createSubnet, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createSubnet", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}

	public org.openecomp.ncomp.openstack.neutron.Port createPort(org.openecomp.ncomp.openstack.neutron.CreatePortRequest request) {
		org.openecomp.ncomp.openstack.neutron.Port res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createPort", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.createPort);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.createPort(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createPort", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.createPort, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createPort", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}

	public org.openecomp.ncomp.openstack.neutron.Router createRouter(org.openecomp.ncomp.openstack.neutron.CreateRouterRequest request) {
		org.openecomp.ncomp.openstack.neutron.Router res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createRouter", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.createRouter);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.createRouter(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createRouter", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.createRouter, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createRouter", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}

	public void deleteNetwork(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteNetwork", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.deleteNetwork);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.deleteNetwork(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteNetwork", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.deleteNetwork, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteNetwork", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public void deleteSubnet(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteSubnet", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.deleteSubnet);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.deleteSubnet(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteSubnet", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.deleteSubnet, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteSubnet", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public void deletePort(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deletePort", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.deletePort);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.deletePort(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deletePort", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.deletePort, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deletePort", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public void deleteRouter(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteRouter", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.deleteRouter);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.deleteRouter(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteRouter", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.deleteRouter, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteRouter", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public void associateFloatingIp(java.lang.String projectName, java.lang.String ipId, java.lang.String portId) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "associateFloatingIp", ApiRequestStatus.START, duration_,projectName,ipId,portId);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.associateFloatingIp);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.associateFloatingIp(projectName,ipId,portId);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "associateFloatingIp", ApiRequestStatus.ERROR, duration_,projectName,ipId,portId);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.associateFloatingIp, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "associateFloatingIp", ApiRequestStatus.OKAY, duration_,projectName,ipId,portId);
		
	}

	public void createServer(org.openecomp.ncomp.openstack.compute.OpenstackRequestNewServer request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createServer", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.createServer);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.createServer(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createServer", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.createServer, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createServer", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void deleteServer(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteServer", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.deleteServer);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.deleteServer(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteServer", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.deleteServer, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteServer", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public void createKeyPair(org.openecomp.ncomp.openstack.compute.OpenstackRequestKeyPair request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createKeyPair", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.createKeyPair);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.createKeyPair(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createKeyPair", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.createKeyPair, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createKeyPair", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void delete(org.openecomp.ncomp.openstack.core.OpenstackRequestDelete request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "delete", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.delete);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.delete(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "delete", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.delete, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "delete", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void createFlavor(org.openecomp.ncomp.openstack.compute.OpenstackRequestFlavor request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createFlavor", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.createFlavor);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.createFlavor(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createFlavor", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.createFlavor, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createFlavor", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void createSecurityGroup(org.openecomp.ncomp.openstack.compute.OpenstackRequestSecurityGroup request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createSecurityGroup", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.createSecurityGroup);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.createSecurityGroup(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createSecurityGroup", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.createSecurityGroup, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createSecurityGroup", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void serverAction(org.openecomp.ncomp.openstack.compute.OpenstackRequestServerAction request) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "serverAction", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.serverAction);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.serverAction(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "serverAction", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.serverAction, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "serverAction", ApiRequestStatus.OKAY, duration_,request);
		
	}

	public void deployVmType(java.lang.String vmTypeName, java.lang.String projectName) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deployVmType", ApiRequestStatus.START, duration_,vmTypeName,projectName);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.deployVmType);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.deployVmType(vmTypeName,projectName);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deployVmType", ApiRequestStatus.ERROR, duration_,vmTypeName,projectName);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.deployVmType, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deployVmType", ApiRequestStatus.OKAY, duration_,vmTypeName,projectName);
		
	}

	public void undeployVmType(java.lang.String vmTypeName, java.lang.String projectName) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "undeployVmType", ApiRequestStatus.START, duration_,vmTypeName,projectName);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.undeployVmType);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.undeployVmType(vmTypeName,projectName);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "undeployVmType", ApiRequestStatus.ERROR, duration_,vmTypeName,projectName);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.undeployVmType, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "undeployVmType", ApiRequestStatus.OKAY, duration_,vmTypeName,projectName);
		
	}

	public void deployUser(org.openecomp.ncomp.core.User user, java.lang.String projectName) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deployUser", ApiRequestStatus.START, duration_,user,projectName);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.deployUser);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.deployUser(user,projectName);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deployUser", ApiRequestStatus.ERROR, duration_,user,projectName);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.deployUser, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deployUser", ApiRequestStatus.OKAY, duration_,user,projectName);
		
	}

	public void undeployUser(org.openecomp.ncomp.core.User user, java.lang.String projectName) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "undeployUser", ApiRequestStatus.START, duration_,user,projectName);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.undeployUser);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.undeployUser(user,projectName);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "undeployUser", ApiRequestStatus.ERROR, duration_,user,projectName);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.undeployUser, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "undeployUser", ApiRequestStatus.OKAY, duration_,user,projectName);
		
	}

	public org.openecomp.ncomp.openstack.ceilometer.CeilometerAlarm createAlarm(org.openecomp.ncomp.openstack.ceilometer.CreateAlarmRequest request) {
		org.openecomp.ncomp.openstack.ceilometer.CeilometerAlarm res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.createAlarm);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.createAlarm(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.createAlarm, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}

	public void deleteAlarm(java.lang.String projectName, java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteAlarm", ApiRequestStatus.START, duration_,projectName,name);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.deleteAlarm);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.deleteAlarm(projectName,name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteAlarm", ApiRequestStatus.ERROR, duration_,projectName,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.deleteAlarm, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteAlarm", ApiRequestStatus.OKAY, duration_,projectName,name);
		
	}

	public EList<org.openecomp.ncomp.openstack.ceilometer.CeilometerSample> createAlarm(org.openecomp.ncomp.openstack.ceilometer.SampleRequest request) {
		EList<org.openecomp.ncomp.openstack.ceilometer.CeilometerSample> res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.START, duration_,request);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(OpenStackLocationOperationEnum.createAlarm);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.createAlarm(request);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.ERROR, duration_,request);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(OpenStackLocationMessageEnum.createAlarm, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createAlarm", ApiRequestStatus.OKAY, duration_,request);
		return res;
	}






	public static void ecoreSetup() {
		OsOpenStackLocationProvider.ecoreSetup();
	}
	public OsOpenStackLocationProvider getSomfProvider() {
		return controller;
	}
}
