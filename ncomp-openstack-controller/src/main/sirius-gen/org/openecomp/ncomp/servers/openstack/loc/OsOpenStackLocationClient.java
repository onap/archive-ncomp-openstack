
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.ncomp.servers.openstack.loc;

import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.HighAvailabilityClient;
import org.openecomp.ncomp.sirius.manager.GenericHttpClient;

import org.apache.log4j.Logger;

import org.openecomp.logger.EcompLogger;
import org.openecomp.logger.StatusCodeEnum;
import org.openecomp.logger.EcompException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;

import org.openecomp.ncomp.openstack.location.impl.OpenStackLocationImpl;
import org.openecomp.ncomp.openstack.location.LocationPackage;
import org.openecomp.ncomp.servers.openstack.loc.logging.OpenStackLocationOperationEnum;
import org.openecomp.ncomp.servers.openstack.loc.logging.OpenStackLocationMessageEnum;


import org.openecomp.ncomp.servers.openstack.OsOpenStackController; 



 
@SuppressWarnings("unchecked")
public class OsOpenStackLocationClient extends OpenStackLocationImpl {
	public static final Logger logger = Logger.getLogger(OsOpenStackLocationClient.class);
	static final EcompLogger ecomplogger = EcompLogger.getEcompLogger();
	public AbstractClient client;

	public OsOpenStackLocationClient(String file, String name) {
		OsOpenStackController.ecoreSetup(); 
		client = new GenericHttpClient(file,name);
		client.add("/loc", this);
		client.setVersion("ONAP-R2");
	}

	public OsOpenStackLocationClient(String file, String name1, String name2) {
		HighAvailabilityClient client1 = new HighAvailabilityClient(file,name1,name2);
		client = client1.all; // requests should be forwarded to all.
		client.add("/loc", this);
		client.setVersion("ONAP-R2");
	}
	
	public OsOpenStackLocationClient(AbstractClient c) {
		client = c;
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}



	@Override
	public void poll() {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_poll,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "poll", null);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_poll, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_poll,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_poll,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void mergeLocation(org.openecomp.ncomp.openstack.location.OpenStackLocation loc) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_mergeLocation,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "mergeLocation", null, loc);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_mergeLocation, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_mergeLocation,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_mergeLocation,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public org.openecomp.ncomp.openstack.neutron.Network createNetwork(org.openecomp.ncomp.openstack.neutron.CreateNetworkRequest request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createNetwork,client.getRemote());
		org.openecomp.ncomp.openstack.neutron.Network res;
		try {
		  res = (org.openecomp.ncomp.openstack.neutron.Network) client.operationPath("/loc", c, "createNetwork", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createNetwork, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createNetwork,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createNetwork,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.ncomp.openstack.neutron.Subnet createSubnet(org.openecomp.ncomp.openstack.neutron.CreateSubnetRequest request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createSubnet,client.getRemote());
		org.openecomp.ncomp.openstack.neutron.Subnet res;
		try {
		  res = (org.openecomp.ncomp.openstack.neutron.Subnet) client.operationPath("/loc", c, "createSubnet", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createSubnet, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createSubnet,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createSubnet,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.ncomp.openstack.neutron.Port createPort(org.openecomp.ncomp.openstack.neutron.CreatePortRequest request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createPort,client.getRemote());
		org.openecomp.ncomp.openstack.neutron.Port res;
		try {
		  res = (org.openecomp.ncomp.openstack.neutron.Port) client.operationPath("/loc", c, "createPort", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createPort, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createPort,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createPort,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.ncomp.openstack.neutron.Router createRouter(org.openecomp.ncomp.openstack.neutron.CreateRouterRequest request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createRouter,client.getRemote());
		org.openecomp.ncomp.openstack.neutron.Router res;
		try {
		  res = (org.openecomp.ncomp.openstack.neutron.Router) client.operationPath("/loc", c, "createRouter", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createRouter, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createRouter,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createRouter,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void deleteNetwork(java.lang.String projectName, java.lang.String name) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deleteNetwork,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "deleteNetwork", null, projectName,name);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteNetwork, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteNetwork,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteNetwork,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void deleteSubnet(java.lang.String projectName, java.lang.String name) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deleteSubnet,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "deleteSubnet", null, projectName,name);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteSubnet, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteSubnet,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteSubnet,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void deletePort(java.lang.String projectName, java.lang.String name) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deletePort,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "deletePort", null, projectName,name);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deletePort, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deletePort,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deletePort,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void deleteRouter(java.lang.String projectName, java.lang.String name) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deleteRouter,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "deleteRouter", null, projectName,name);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteRouter, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteRouter,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteRouter,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void associateFloatingIp(java.lang.String projectName, java.lang.String ipId, java.lang.String portId) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_associateFloatingIp,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "associateFloatingIp", null, projectName,ipId,portId);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_associateFloatingIp, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_associateFloatingIp,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_associateFloatingIp,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void createServer(org.openecomp.ncomp.openstack.compute.OpenstackRequestNewServer request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createServer,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "createServer", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createServer, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createServer,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createServer,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void deleteServer(java.lang.String projectName, java.lang.String name) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deleteServer,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "deleteServer", null, projectName,name);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteServer, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteServer,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteServer,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void createKeyPair(org.openecomp.ncomp.openstack.compute.OpenstackRequestKeyPair request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createKeyPair,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "createKeyPair", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createKeyPair, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createKeyPair,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createKeyPair,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void delete(org.openecomp.ncomp.openstack.core.OpenstackRequestDelete request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_delete,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "delete", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_delete, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_delete,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_delete,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void createFlavor(org.openecomp.ncomp.openstack.compute.OpenstackRequestFlavor request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createFlavor,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "createFlavor", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createFlavor, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createFlavor,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createFlavor,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void createSecurityGroup(org.openecomp.ncomp.openstack.compute.OpenstackRequestSecurityGroup request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createSecurityGroup,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "createSecurityGroup", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createSecurityGroup, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createSecurityGroup,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createSecurityGroup,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void serverAction(org.openecomp.ncomp.openstack.compute.OpenstackRequestServerAction request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_serverAction,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "serverAction", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_serverAction, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_serverAction,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_serverAction,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void deployVmType(java.lang.String vmTypeName, java.lang.String projectName) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deployVmType,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "deployVmType", null, vmTypeName,projectName);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deployVmType, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deployVmType,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deployVmType,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void undeployVmType(java.lang.String vmTypeName, java.lang.String projectName) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_undeployVmType,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "undeployVmType", null, vmTypeName,projectName);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_undeployVmType, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_undeployVmType,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_undeployVmType,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void deployUser(org.openecomp.ncomp.core.User user, java.lang.String projectName) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deployUser,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "deployUser", null, user,projectName);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deployUser, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deployUser,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deployUser,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void undeployUser(org.openecomp.ncomp.core.User user, java.lang.String projectName) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_undeployUser,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "undeployUser", null, user,projectName);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_undeployUser, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_undeployUser,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_undeployUser,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public org.openecomp.ncomp.openstack.ceilometer.CeilometerAlarm createAlarm(org.openecomp.ncomp.openstack.ceilometer.CreateAlarmRequest request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createAlarm,client.getRemote());
		org.openecomp.ncomp.openstack.ceilometer.CeilometerAlarm res;
		try {
		  res = (org.openecomp.ncomp.openstack.ceilometer.CeilometerAlarm) client.operationPath("/loc", c, "createAlarm", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createAlarm, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createAlarm,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createAlarm,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void deleteAlarm(java.lang.String projectName, java.lang.String name) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_deleteAlarm,client.getRemote());
		
		try {
		  client.operationPath("/loc", c, "deleteAlarm", null, projectName,name);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteAlarm, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteAlarm,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_deleteAlarm,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public EList<org.openecomp.ncomp.openstack.ceilometer.CeilometerSample> createAlarm(org.openecomp.ncomp.openstack.ceilometer.SampleRequest request) {
		EClass c = LocationPackage.eINSTANCE.getOpenStackLocation(); 
		ecomplogger.recordMetricEventStart(OpenStackLocationOperationEnum.OpenStackLocation_createAlarm,client.getRemote());
		EList<org.openecomp.ncomp.openstack.ceilometer.CeilometerSample> res;
		try {
		  res = (EList<org.openecomp.ncomp.openstack.ceilometer.CeilometerSample>) client.operationPath("/loc", c, "createAlarm", null, request);
		}
		catch (Exception e) {
			ecomplogger.warn(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createAlarm, e.toString());
			EcompException e1 = EcompException.create(OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createAlarm,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,OpenStackLocationMessageEnum.REMOTE_CALL_FAILED_createAlarm,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

}
